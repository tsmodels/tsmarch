// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pit_transform
arma::mat pit_transform(arma::mat u, const double shape, Rcpp::String distribution);
RcppExport SEXP _tsmarch_pit_transform(SEXP uSEXP, SEXP shapeSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(pit_transform(u, shape, distribution));
    return rcpp_result_gen;
END_RCPP
}
// copula_constant_normal
Rcpp::List copula_constant_normal(const arma::mat u, Rcpp::String method);
RcppExport SEXP _tsmarch_copula_constant_normal(SEXP uSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_constant_normal(u, method));
    return rcpp_result_gen;
END_RCPP
}
// copula_constant_student
Rcpp::List copula_constant_student(double shape, const arma::mat u);
RcppExport SEXP _tsmarch_copula_constant_student(SEXP shapeSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_constant_student(shape, u));
    return rcpp_result_gen;
END_RCPP
}
// copula_dynamic_normal
Rcpp::List copula_dynamic_normal(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, const arma::mat u, Rcpp::IntegerVector dccorder);
RcppExport SEXP _tsmarch_copula_dynamic_normal(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP uSEXP, SEXP dccorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_dynamic_normal(alpha, gamma, beta, u, dccorder));
    return rcpp_result_gen;
END_RCPP
}
// copula_dynamic_student
Rcpp::List copula_dynamic_student(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat u, Rcpp::IntegerVector dccorder);
RcppExport SEXP _tsmarch_copula_dynamic_student(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP uSEXP, SEXP dccorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_dynamic_student(alpha, gamma, beta, shape, u, dccorder));
    return rcpp_result_gen;
END_RCPP
}
// copula_constant_normal_filter
Rcpp::List copula_constant_normal_filter(const arma::mat u, Rcpp::String method, const int n_update);
RcppExport SEXP _tsmarch_copula_constant_normal_filter(SEXP uSEXP, SEXP methodSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_constant_normal_filter(u, method, n_update));
    return rcpp_result_gen;
END_RCPP
}
// copula_constant_student_filter
Rcpp::List copula_constant_student_filter(double shape, const arma::mat u, const int n_update);
RcppExport SEXP _tsmarch_copula_constant_student_filter(SEXP shapeSEXP, SEXP uSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_constant_student_filter(shape, u, n_update));
    return rcpp_result_gen;
END_RCPP
}
// copula_dynamic_normal_filter
Rcpp::List copula_dynamic_normal_filter(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, const arma::mat u, Rcpp::IntegerVector dccorder, const int n_update);
RcppExport SEXP _tsmarch_copula_dynamic_normal_filter(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP uSEXP, SEXP dccorderSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_dynamic_normal_filter(alpha, gamma, beta, u, dccorder, n_update));
    return rcpp_result_gen;
END_RCPP
}
// copula_dynamic_student_filter
Rcpp::List copula_dynamic_student_filter(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat u, Rcpp::IntegerVector dccorder, const int n_update);
RcppExport SEXP _tsmarch_copula_dynamic_student_filter(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP uSEXP, SEXP dccorderSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_dynamic_student_filter(alpha, gamma, beta, shape, u, dccorder, n_update));
    return rcpp_result_gen;
END_RCPP
}
// copula_dynamic_simulate
Rcpp::List copula_dynamic_simulate(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat Qbar, arma::mat Nbar, const arma::cube Qinit, const arma::mat Zinit, const arma::mat std_noise, const int timesteps, const int burn, Rcpp::IntegerVector dccorder, Rcpp::String distribution);
RcppExport SEXP _tsmarch_copula_dynamic_simulate(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP QbarSEXP, SEXP NbarSEXP, SEXP QinitSEXP, SEXP ZinitSEXP, SEXP std_noiseSEXP, SEXP timestepsSEXP, SEXP burnSEXP, SEXP dccorderSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Qbar(QbarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Nbar(NbarSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qinit(QinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Zinit(ZinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type std_noise(std_noiseSEXP);
    Rcpp::traits::input_parameter< const int >::type timesteps(timestepsSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_dynamic_simulate(alpha, gamma, beta, shape, Qbar, Nbar, Qinit, Zinit, std_noise, timesteps, burn, dccorder, distribution));
    return rcpp_result_gen;
END_RCPP
}
// copula_constant_simulate
Rcpp::List copula_constant_simulate(const double shape, const arma::mat R, const arma::mat std_noise, const int timesteps, Rcpp::String distribution);
RcppExport SEXP _tsmarch_copula_constant_simulate(SEXP shapeSEXP, SEXP RSEXP, SEXP std_noiseSEXP, SEXP timestepsSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type std_noise(std_noiseSEXP);
    Rcpp::traits::input_parameter< const int >::type timesteps(timestepsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_constant_simulate(shape, R, std_noise, timesteps, distribution));
    return rcpp_result_gen;
END_RCPP
}
// copula_adcc_constraint
double copula_adcc_constraint(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat u, Rcpp::IntegerVector dccorder, Rcpp::String distribution);
RcppExport SEXP _tsmarch_copula_adcc_constraint(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP uSEXP, SEXP dccorderSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_adcc_constraint(alpha, gamma, beta, shape, u, dccorder, distribution));
    return rcpp_result_gen;
END_RCPP
}
// matrix_sign
arma::mat matrix_sign(arma::mat x);
RcppExport SEXP _tsmarch_matrix_sign(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_sign(x));
    return rcpp_result_gen;
END_RCPP
}
// make_correlation
arma::mat make_correlation(const arma::mat data, Rcpp::String method);
RcppExport SEXP _tsmarch_make_correlation(SEXP dataSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(make_correlation(data, method));
    return rcpp_result_gen;
END_RCPP
}
// make_psd
arma::mat make_psd(arma::mat x, const double eig_tol, const double conv_tol, const double posd_tol, const int maxit);
RcppExport SEXP _tsmarch_make_psd(SEXP xSEXP, SEXP eig_tolSEXP, SEXP conv_tolSEXP, SEXP posd_tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type eig_tol(eig_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type posd_tol(posd_tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(make_psd(x, eig_tol, conv_tol, posd_tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// p2P
arma::mat p2P(arma::vec values, const int m);
RcppExport SEXP _tsmarch_p2P(SEXP valuesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(p2P(values, m));
    return rcpp_result_gen;
END_RCPP
}
// is_psd
bool is_psd(arma::mat x);
RcppExport SEXP _tsmarch_is_psd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_psd(x));
    return rcpp_result_gen;
END_RCPP
}
// array_mean
arma::mat array_mean(arma::cube x);
RcppExport SEXP _tsmarch_array_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(array_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// dcc_constant_normal
Rcpp::List dcc_constant_normal(const arma::mat Z, const arma::mat S);
RcppExport SEXP _tsmarch_dcc_constant_normal(SEXP ZSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_constant_normal(Z, S));
    return rcpp_result_gen;
END_RCPP
}
// dcc_constant_student
Rcpp::List dcc_constant_student(const arma::mat Z, const arma::mat S, const double shape);
RcppExport SEXP _tsmarch_dcc_constant_student(SEXP ZSEXP, SEXP SSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_constant_student(Z, S, shape));
    return rcpp_result_gen;
END_RCPP
}
// dcc_dynamic_normal
Rcpp::List dcc_dynamic_normal(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, const arma::mat z, const arma::mat s, Rcpp::IntegerVector dccorder);
RcppExport SEXP _tsmarch_dcc_dynamic_normal(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP zSEXP, SEXP sSEXP, SEXP dccorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_dynamic_normal(alpha, gamma, beta, z, s, dccorder));
    return rcpp_result_gen;
END_RCPP
}
// dcc_dynamic_student
Rcpp::List dcc_dynamic_student(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat z, const arma::mat s, Rcpp::IntegerVector dccorder);
RcppExport SEXP _tsmarch_dcc_dynamic_student(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP zSEXP, SEXP sSEXP, SEXP dccorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_dynamic_student(alpha, gamma, beta, shape, z, s, dccorder));
    return rcpp_result_gen;
END_RCPP
}
// adcc_constraint
double adcc_constraint(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat z, Rcpp::IntegerVector dccorder);
RcppExport SEXP _tsmarch_adcc_constraint(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP zSEXP, SEXP dccorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    rcpp_result_gen = Rcpp::wrap(adcc_constraint(alpha, gamma, beta, shape, z, dccorder));
    return rcpp_result_gen;
END_RCPP
}
// dcc_constant_normal_filter
Rcpp::List dcc_constant_normal_filter(const arma::mat Z, const arma::mat S, const int n_update);
RcppExport SEXP _tsmarch_dcc_constant_normal_filter(SEXP ZSEXP, SEXP SSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_constant_normal_filter(Z, S, n_update));
    return rcpp_result_gen;
END_RCPP
}
// dcc_constant_student_filter
Rcpp::List dcc_constant_student_filter(double shape, const arma::mat Z, arma::mat S, const int n_update);
RcppExport SEXP _tsmarch_dcc_constant_student_filter(SEXP shapeSEXP, SEXP ZSEXP, SEXP SSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_constant_student_filter(shape, Z, S, n_update));
    return rcpp_result_gen;
END_RCPP
}
// dcc_dynamic_normal_filter
Rcpp::List dcc_dynamic_normal_filter(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, const arma::mat z, const arma::mat s, Rcpp::IntegerVector dccorder, const int n_update);
RcppExport SEXP _tsmarch_dcc_dynamic_normal_filter(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP zSEXP, SEXP sSEXP, SEXP dccorderSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_dynamic_normal_filter(alpha, gamma, beta, z, s, dccorder, n_update));
    return rcpp_result_gen;
END_RCPP
}
// dcc_dynamic_student_filter
Rcpp::List dcc_dynamic_student_filter(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat z, const arma::mat s, Rcpp::IntegerVector dccorder, const int n_update);
RcppExport SEXP _tsmarch_dcc_dynamic_student_filter(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP zSEXP, SEXP sSEXP, SEXP dccorderSEXP, SEXP n_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< const int >::type n_update(n_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_dynamic_student_filter(alpha, gamma, beta, shape, z, s, dccorder, n_update));
    return rcpp_result_gen;
END_RCPP
}
// dcc_dynamic_simulate
Rcpp::List dcc_dynamic_simulate(const arma::vec alpha, const arma::vec gamma, const arma::vec beta, double shape, const arma::mat Qbar, arma::mat Nbar, const arma::cube Qinit, const arma::mat Zinit, const arma::mat std_noise, const int timesteps, const int burn, Rcpp::IntegerVector dccorder, Rcpp::String distribution);
RcppExport SEXP _tsmarch_dcc_dynamic_simulate(SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP shapeSEXP, SEXP QbarSEXP, SEXP NbarSEXP, SEXP QinitSEXP, SEXP ZinitSEXP, SEXP std_noiseSEXP, SEXP timestepsSEXP, SEXP burnSEXP, SEXP dccorderSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Qbar(QbarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Nbar(NbarSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qinit(QinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Zinit(ZinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type std_noise(std_noiseSEXP);
    Rcpp::traits::input_parameter< const int >::type timesteps(timestepsSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dccorder(dccorderSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_dynamic_simulate(alpha, gamma, beta, shape, Qbar, Nbar, Qinit, Zinit, std_noise, timesteps, burn, dccorder, distribution));
    return rcpp_result_gen;
END_RCPP
}
// dcc_constant_simulate
Rcpp::List dcc_constant_simulate(const double shape, const arma::mat R, const arma::mat std_noise, const int timesteps, Rcpp::String distribution);
RcppExport SEXP _tsmarch_dcc_constant_simulate(SEXP shapeSEXP, SEXP RSEXP, SEXP std_noiseSEXP, SEXP timestepsSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type std_noise(std_noiseSEXP);
    Rcpp::traits::input_parameter< const int >::type timesteps(timestepsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(dcc_constant_simulate(shape, R, std_noise, timesteps, distribution));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::mat rmvnorm(arma::mat R, arma::mat Z);
RcppExport SEXP _tsmarch_rmvnorm(SEXP RSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(R, Z));
    return rcpp_result_gen;
END_RCPP
}
// rmvt
arma::mat rmvt(arma::mat R, arma::mat Z, const double nu);
RcppExport SEXP _tsmarch_rmvt(SEXP RSEXP, SEXP ZSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvt(R, Z, nu));
    return rcpp_result_gen;
END_RCPP
}
// interpolate_window
arma::vec interpolate_window(const arma::vec& x, const arma::vec& y, const arma::vec& z, int w);
RcppExport SEXP _tsmarch_interpolate_window(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolate_window(x, y, z, w));
    return rcpp_result_gen;
END_RCPP
}
// nigmvcf
arma::cx_vec nigmvcf(const arma::vec& z, const arma::vec& alpha, const arma::vec& beta, const arma::vec& delta, const arma::vec& mu);
RcppExport SEXP _tsmarch_nigmvcf(SEXP zSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(nigmvcf(z, alpha, beta, delta, mu));
    return rcpp_result_gen;
END_RCPP
}
// cfinvnig
arma::vec cfinvnig(const arma::vec& z, double step, const arma::vec& alpha, const arma::vec& beta, const arma::vec& delta, const arma::vec& mu);
RcppExport SEXP _tsmarch_cfinvnig(SEXP zSEXP, SEXP stepSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(cfinvnig(z, step, alpha, beta, delta, mu));
    return rcpp_result_gen;
END_RCPP
}
// ghypfn
std::complex<double> ghypfn(double lambda, double alpha, double beta, double delta, double z);
RcppExport SEXP _tsmarch_ghypfn(SEXP lambdaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(ghypfn(lambda, alpha, beta, delta, z));
    return rcpp_result_gen;
END_RCPP
}
// ghypmvcf
arma::cx_vec ghypmvcf(const arma::vec& z, const arma::vec& lambda, const arma::vec& alpha, const arma::vec& beta, const arma::vec& delta, const arma::vec& mu);
RcppExport SEXP _tsmarch_ghypmvcf(SEXP zSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(ghypmvcf(z, lambda, alpha, beta, delta, mu));
    return rcpp_result_gen;
END_RCPP
}
// cfinvghyp
arma::vec cfinvghyp(const arma::vec& z, double step, const arma::vec& lambda, const arma::vec& alpha, const arma::vec& beta, const arma::vec& delta, const arma::vec& mu);
RcppExport SEXP _tsmarch_cfinvghyp(SEXP zSEXP, SEXP stepSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(cfinvghyp(z, step, lambda, alpha, beta, delta, mu));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_covariance
arma::mat gogarch_covariance(const arma::mat V, const arma::mat A);
RcppExport SEXP _tsmarch_gogarch_covariance(SEXP VSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_covariance(V, A));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_correlation
arma::mat gogarch_correlation(const arma::mat V, const arma::mat A);
RcppExport SEXP _tsmarch_gogarch_correlation(SEXP VSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_correlation(V, A));
    return rcpp_result_gen;
END_RCPP
}
// coskewness_sigma
arma::mat coskewness_sigma(const arma::vec sigmas);
RcppExport SEXP _tsmarch_coskewness_sigma(SEXP sigmasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type sigmas(sigmasSEXP);
    rcpp_result_gen = Rcpp::wrap(coskewness_sigma(sigmas));
    return rcpp_result_gen;
END_RCPP
}
// coskewness_block
arma::mat coskewness_block(const arma::rowvec skew);
RcppExport SEXP _tsmarch_coskewness_block(SEXP skewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type skew(skewSEXP);
    rcpp_result_gen = Rcpp::wrap(coskewness_block(skew));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_coskewness
arma::cube gogarch_coskewness(const arma::mat A, const arma::mat S, const arma::mat V, bool standardize);
RcppExport SEXP _tsmarch_gogarch_coskewness(SEXP ASEXP, SEXP SSEXP, SEXP VSEXP, SEXP standardizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_coskewness(A, S, V, standardize));
    return rcpp_result_gen;
END_RCPP
}
// combn
arma::umat combn(const arma::uvec n, int m);
RcppExport SEXP _tsmarch_combn(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(combn(n, m));
    return rcpp_result_gen;
END_RCPP
}
// cokurtosis_pairs
arma::field<arma::umat> cokurtosis_pairs(int n);
RcppExport SEXP _tsmarch_cokurtosis_pairs(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cokurtosis_pairs(n));
    return rcpp_result_gen;
END_RCPP
}
// cokurtosis_block
arma::mat cokurtosis_block(const arma::vec s, const arma::vec values);
RcppExport SEXP _tsmarch_cokurtosis_block(SEXP sSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cokurtosis_block(s, values));
    return rcpp_result_gen;
END_RCPP
}
// cokurtosis_sigma
arma::mat cokurtosis_sigma(const arma::vec sigmas);
RcppExport SEXP _tsmarch_cokurtosis_sigma(SEXP sigmasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type sigmas(sigmasSEXP);
    rcpp_result_gen = Rcpp::wrap(cokurtosis_sigma(sigmas));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_cokurtosis
arma::cube gogarch_cokurtosis(const arma::mat A, const arma::mat K, const arma::mat V, bool standardize);
RcppExport SEXP _tsmarch_gogarch_cokurtosis(SEXP ASEXP, SEXP KSEXP, SEXP VSEXP, SEXP standardizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_cokurtosis(A, K, V, standardize));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_skewness_weighted
arma::vec gogarch_skewness_weighted(const arma::mat A, const arma::mat S, const arma::mat w);
RcppExport SEXP _tsmarch_gogarch_skewness_weighted(SEXP ASEXP, SEXP SSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_skewness_weighted(A, S, w));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_cokurtosis_weighted
arma::vec gogarch_cokurtosis_weighted(const arma::mat A, const arma::mat K, const arma::mat V, const arma::mat w);
RcppExport SEXP _tsmarch_gogarch_cokurtosis_weighted(SEXP ASEXP, SEXP KSEXP, SEXP VSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_cokurtosis_weighted(A, K, V, w));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_covariance_weighted
arma::vec gogarch_covariance_weighted(const arma::mat V, const arma::mat A, const arma::mat w);
RcppExport SEXP _tsmarch_gogarch_covariance_weighted(SEXP VSEXP, SEXP ASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_covariance_weighted(V, A, w));
    return rcpp_result_gen;
END_RCPP
}
// gogarch_cokurtosis_weighted_sim
arma::mat gogarch_cokurtosis_weighted_sim(const arma::mat& A, const arma::cube& sig, const arma::mat& ku, const arma::mat& weights, int nsim, int n);
RcppExport SEXP _tsmarch_gogarch_cokurtosis_weighted_sim(SEXP ASEXP, SEXP sigSEXP, SEXP kuSEXP, SEXP weightsSEXP, SEXP nsimSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ku(kuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(gogarch_cokurtosis_weighted_sim(A, sig, ku, weights, nsim, n));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_mu
arma::mat aggregate_mu(arma::cube mu, arma::mat w);
RcppExport SEXP _tsmarch_aggregate_mu(SEXP muSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_mu(mu, w));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_sigma
arma::mat aggregate_sigma(arma::cube sigma, arma::mat w);
RcppExport SEXP _tsmarch_aggregate_sigma(SEXP sigmaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_sigma(sigma, w));
    return rcpp_result_gen;
END_RCPP
}
// tril2sym
arma::cube tril2sym(arma::mat values, const int m, const bool diag);
RcppExport SEXP _tsmarch_tril2sym(SEXP valuesSEXP, SEXP mSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(tril2sym(values, m, diag));
    return rcpp_result_gen;
END_RCPP
}
// sym2tril
arma::mat sym2tril(arma::cube S, const bool diag);
RcppExport SEXP _tsmarch_sym2tril(SEXP SSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(sym2tril(S, diag));
    return rcpp_result_gen;
END_RCPP
}
// generate_constant_covariance
Rcpp::List generate_constant_covariance(const arma::mat& correlation, const arma::mat& sigmas, const arma::mat& residuals);
RcppExport SEXP _tsmarch_generate_constant_covariance(SEXP correlationSEXP, SEXP sigmasSEXP, SEXP residualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type correlation(correlationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type residuals(residualsSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_constant_covariance(correlation, sigmas, residuals));
    return rcpp_result_gen;
END_RCPP
}
// generate_dynamic_covariance
Rcpp::List generate_dynamic_covariance(arma::cube correlation, const arma::mat& sigmas, const arma::mat& residuals);
RcppExport SEXP _tsmarch_generate_dynamic_covariance(SEXP correlationSEXP, SEXP sigmasSEXP, SEXP residualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type correlation(correlationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type residuals(residualsSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_dynamic_covariance(correlation, sigmas, residuals));
    return rcpp_result_gen;
END_RCPP
}
// cor2cov
arma::cube cor2cov(const arma::cube r, const arma::cube sigma, const int m);
RcppExport SEXP _tsmarch_cor2cov(SEXP rSEXP, SEXP sigmaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cor2cov(r, sigma, m));
    return rcpp_result_gen;
END_RCPP
}
// cor2cov2
arma::cube cor2cov2(const arma::rowvec r, const arma::cube sigma, const int m);
RcppExport SEXP _tsmarch_cor2cov2(SEXP rSEXP, SEXP sigmaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cor2cov2(r, sigma, m));
    return rcpp_result_gen;
END_RCPP
}
// qnig
NumericVector qnig(NumericVector p, double mu, double delta, double alpha, double beta);
RcppExport SEXP _tsmarch_qnig(SEXP pSEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(qnig(p, mu, delta, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// radical_recursion
Rcpp::List radical_recursion(const int k, const double sigma, const double samples, const int replications, const arma::mat whitening_signal, const arma::mat whitening_matrix, const arma::mat dewhitening_matrix, const arma::mat mixed_signal, const arma::vec mixed_mean, bool trace);
RcppExport SEXP _tsmarch_radical_recursion(SEXP kSEXP, SEXP sigmaSEXP, SEXP samplesSEXP, SEXP replicationsSEXP, SEXP whitening_signalSEXP, SEXP whitening_matrixSEXP, SEXP dewhitening_matrixSEXP, SEXP mixed_signalSEXP, SEXP mixed_meanSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type replications(replicationsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type whitening_signal(whitening_signalSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type whitening_matrix(whitening_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type dewhitening_matrix(dewhitening_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type mixed_signal(mixed_signalSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mixed_mean(mixed_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(radical_recursion(k, sigma, samples, replications, whitening_signal, whitening_matrix, dewhitening_matrix, mixed_signal, mixed_mean, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tsmarch_pit_transform", (DL_FUNC) &_tsmarch_pit_transform, 3},
    {"_tsmarch_copula_constant_normal", (DL_FUNC) &_tsmarch_copula_constant_normal, 2},
    {"_tsmarch_copula_constant_student", (DL_FUNC) &_tsmarch_copula_constant_student, 2},
    {"_tsmarch_copula_dynamic_normal", (DL_FUNC) &_tsmarch_copula_dynamic_normal, 5},
    {"_tsmarch_copula_dynamic_student", (DL_FUNC) &_tsmarch_copula_dynamic_student, 6},
    {"_tsmarch_copula_constant_normal_filter", (DL_FUNC) &_tsmarch_copula_constant_normal_filter, 3},
    {"_tsmarch_copula_constant_student_filter", (DL_FUNC) &_tsmarch_copula_constant_student_filter, 3},
    {"_tsmarch_copula_dynamic_normal_filter", (DL_FUNC) &_tsmarch_copula_dynamic_normal_filter, 6},
    {"_tsmarch_copula_dynamic_student_filter", (DL_FUNC) &_tsmarch_copula_dynamic_student_filter, 7},
    {"_tsmarch_copula_dynamic_simulate", (DL_FUNC) &_tsmarch_copula_dynamic_simulate, 13},
    {"_tsmarch_copula_constant_simulate", (DL_FUNC) &_tsmarch_copula_constant_simulate, 5},
    {"_tsmarch_copula_adcc_constraint", (DL_FUNC) &_tsmarch_copula_adcc_constraint, 7},
    {"_tsmarch_matrix_sign", (DL_FUNC) &_tsmarch_matrix_sign, 1},
    {"_tsmarch_make_correlation", (DL_FUNC) &_tsmarch_make_correlation, 2},
    {"_tsmarch_make_psd", (DL_FUNC) &_tsmarch_make_psd, 5},
    {"_tsmarch_p2P", (DL_FUNC) &_tsmarch_p2P, 2},
    {"_tsmarch_is_psd", (DL_FUNC) &_tsmarch_is_psd, 1},
    {"_tsmarch_array_mean", (DL_FUNC) &_tsmarch_array_mean, 1},
    {"_tsmarch_dcc_constant_normal", (DL_FUNC) &_tsmarch_dcc_constant_normal, 2},
    {"_tsmarch_dcc_constant_student", (DL_FUNC) &_tsmarch_dcc_constant_student, 3},
    {"_tsmarch_dcc_dynamic_normal", (DL_FUNC) &_tsmarch_dcc_dynamic_normal, 6},
    {"_tsmarch_dcc_dynamic_student", (DL_FUNC) &_tsmarch_dcc_dynamic_student, 7},
    {"_tsmarch_adcc_constraint", (DL_FUNC) &_tsmarch_adcc_constraint, 6},
    {"_tsmarch_dcc_constant_normal_filter", (DL_FUNC) &_tsmarch_dcc_constant_normal_filter, 3},
    {"_tsmarch_dcc_constant_student_filter", (DL_FUNC) &_tsmarch_dcc_constant_student_filter, 4},
    {"_tsmarch_dcc_dynamic_normal_filter", (DL_FUNC) &_tsmarch_dcc_dynamic_normal_filter, 7},
    {"_tsmarch_dcc_dynamic_student_filter", (DL_FUNC) &_tsmarch_dcc_dynamic_student_filter, 8},
    {"_tsmarch_dcc_dynamic_simulate", (DL_FUNC) &_tsmarch_dcc_dynamic_simulate, 13},
    {"_tsmarch_dcc_constant_simulate", (DL_FUNC) &_tsmarch_dcc_constant_simulate, 5},
    {"_tsmarch_rmvnorm", (DL_FUNC) &_tsmarch_rmvnorm, 2},
    {"_tsmarch_rmvt", (DL_FUNC) &_tsmarch_rmvt, 3},
    {"_tsmarch_interpolate_window", (DL_FUNC) &_tsmarch_interpolate_window, 4},
    {"_tsmarch_nigmvcf", (DL_FUNC) &_tsmarch_nigmvcf, 5},
    {"_tsmarch_cfinvnig", (DL_FUNC) &_tsmarch_cfinvnig, 6},
    {"_tsmarch_ghypfn", (DL_FUNC) &_tsmarch_ghypfn, 5},
    {"_tsmarch_ghypmvcf", (DL_FUNC) &_tsmarch_ghypmvcf, 6},
    {"_tsmarch_cfinvghyp", (DL_FUNC) &_tsmarch_cfinvghyp, 7},
    {"_tsmarch_gogarch_covariance", (DL_FUNC) &_tsmarch_gogarch_covariance, 2},
    {"_tsmarch_gogarch_correlation", (DL_FUNC) &_tsmarch_gogarch_correlation, 2},
    {"_tsmarch_coskewness_sigma", (DL_FUNC) &_tsmarch_coskewness_sigma, 1},
    {"_tsmarch_coskewness_block", (DL_FUNC) &_tsmarch_coskewness_block, 1},
    {"_tsmarch_gogarch_coskewness", (DL_FUNC) &_tsmarch_gogarch_coskewness, 4},
    {"_tsmarch_combn", (DL_FUNC) &_tsmarch_combn, 2},
    {"_tsmarch_cokurtosis_pairs", (DL_FUNC) &_tsmarch_cokurtosis_pairs, 1},
    {"_tsmarch_cokurtosis_block", (DL_FUNC) &_tsmarch_cokurtosis_block, 2},
    {"_tsmarch_cokurtosis_sigma", (DL_FUNC) &_tsmarch_cokurtosis_sigma, 1},
    {"_tsmarch_gogarch_cokurtosis", (DL_FUNC) &_tsmarch_gogarch_cokurtosis, 4},
    {"_tsmarch_gogarch_skewness_weighted", (DL_FUNC) &_tsmarch_gogarch_skewness_weighted, 3},
    {"_tsmarch_gogarch_cokurtosis_weighted", (DL_FUNC) &_tsmarch_gogarch_cokurtosis_weighted, 4},
    {"_tsmarch_gogarch_covariance_weighted", (DL_FUNC) &_tsmarch_gogarch_covariance_weighted, 3},
    {"_tsmarch_gogarch_cokurtosis_weighted_sim", (DL_FUNC) &_tsmarch_gogarch_cokurtosis_weighted_sim, 6},
    {"_tsmarch_aggregate_mu", (DL_FUNC) &_tsmarch_aggregate_mu, 2},
    {"_tsmarch_aggregate_sigma", (DL_FUNC) &_tsmarch_aggregate_sigma, 2},
    {"_tsmarch_tril2sym", (DL_FUNC) &_tsmarch_tril2sym, 3},
    {"_tsmarch_sym2tril", (DL_FUNC) &_tsmarch_sym2tril, 2},
    {"_tsmarch_generate_constant_covariance", (DL_FUNC) &_tsmarch_generate_constant_covariance, 3},
    {"_tsmarch_generate_dynamic_covariance", (DL_FUNC) &_tsmarch_generate_dynamic_covariance, 3},
    {"_tsmarch_cor2cov", (DL_FUNC) &_tsmarch_cor2cov, 3},
    {"_tsmarch_cor2cov2", (DL_FUNC) &_tsmarch_cor2cov2, 3},
    {"_tsmarch_qnig", (DL_FUNC) &_tsmarch_qnig, 5},
    {"_tsmarch_radical_recursion", (DL_FUNC) &_tsmarch_radical_recursion, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsmarch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
